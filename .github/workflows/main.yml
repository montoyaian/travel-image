name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
 build:
    runs-on: ubuntu-latest
    outputs:
      tag_id: ${{ steps.date.outputs.date }}

    steps:
    - uses: actions/checkout@v4
    - name: Get timestamp # get the date of the build
      id: date
      run: echo "date=$(TZ=':America/Bogota' date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_OUTPUT
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag montoyita41/proyecto:${{ steps.date.outputs.date }}
    - name: Login to Dockerhub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push the Docker image to Dockerhub
      run: docker push montoyita41/proyecto:${{ steps.date.outputs.date }}

 deploykubernetes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Add /usr/local/bin to PATH
      run: |
        export PATH="/usr/local/bin:$PATH"
    - uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
    
    - name: Checkout c√≥digo
      uses: actions/checkout@v2
    
    - name: Instalar curl
      run: sudo apt-get update && sudo apt-get install -y curl
    
    - name: Azure CLI script
      uses: azure/cli@v2
      env:
        TAG_ID: ${{ steps.date.outputs.tag_id }}
      with:
        azcliversion: latest
        inlineScript: |
          az aks install-cli
          az account set --subscription 83c62e88-35c0-4f8d-8636-f21914cc6d80
          az aks get-credentials --resource-group travel-rg --name kubernetes-travel --overwrite-existing
          kubectl get service -l app.kubernetes.io/name=ingress-nginx --namespace ingress-basic-travel1
          TAGID=${{ steps.date.outputs.date }}
          cat << EOF > api-deployment.yml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: web
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: web
            strategy:
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 1
            minReadySeconds: 5 
            template:
              metadata:
                labels:
                  app: web
              spec:
                nodeSelector:
                  "kubernetes.io/os": linux
                containers:
                - name: web
                  image: montoyita41/proyecto:$TAGID
                  ports:
                  - containerPort: 80
                  resources:
                    requests:
                      cpu: 250m
                    limits:
                      cpu: 500m
          
          
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: web
          spec:
            type: LoadBalancer
            ports:
            - port: 80
            selector:
              app: web
          EOF
          kubectl apply -f ./api-deployment.yml  --validate=false  
          sleep 30s && kubectl get service
          kubectl get ingress


