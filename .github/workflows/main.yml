name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
 build:
    runs-on: ubuntu-latest
    outputs:
      tag_id: ${{ steps.date.outputs.date }}

    steps:
    - uses: actions/checkout@v4
    - name: Get timestamp 
      id: date
      run: echo "date=$(TZ=':America/Bogota' date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_OUTPUT
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag montoyita41/proyecto:${{ steps.date.outputs.date }}
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag montoyita41/proyecto:latest
    - name: Login to Dockerhub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push the Docker image to Dockerhub
      run: docker push montoyita41/proyecto:${{ steps.date.outputs.date }}
    - name: Push the Docker image to Dockerhub
      run: docker push montoyita41/proyecto:latest
 deploykubernetes:
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v4

    
    - name: Add /usr/local/bin to PATH
      run: |
        export PATH="/usr/local/bin:$PATH"
    - uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
    - name: Checkout c√≥digo
      uses: actions/checkout@v2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: 'latest'

    - name: Create ingress-nginx namespace
      run: |
        kubectl create namespace ingress-nginx || true
  
    - name: Update Helm repositories
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
    
    - name: Install NGINX Ingress Controller
      run: |
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx
  
  
    - name: Install cert-manager
      run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml

    - name: Create ClusterIssuer
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-prod
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: montoyita41@hotmail.com
            privateKeySecretRef:
              name: letsencrypt-prod
            solvers:
            - http01:
                ingress:
                  class: nginx
        EOF

    - name: Deploy Application
      run: |
        kubectl apply -f terraform/k8s/api-deployment.yaml

    - name: Wait for LoadBalancer IP
      run: |
        sleep 60
        EXTERNAL_IP=""
        while [ -z "$EXTERNAL_IP" ]; do
          echo "Waiting for end point..."
          EXTERNAL_IP=$(kubectl get svc my-web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$EXTERNAL_IP" ] && sleep 10
        done
        echo "Service External IP: $EXTERNAL_IP"
        echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV

    - name: Create Ingress
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: my-web-ingress
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/rewrite-target: /
        spec:
          tls:
          - hosts:
            - ${{ env.EXTERNAL_IP }}.nip.io
            secretName: my-web-cert
          rules:
          - host: ${{ env.EXTERNAL_IP }}.nip.io
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: my-web-service
                    port:
                      number: 80
        EOF

    

